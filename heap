#include<stdio.h>
struct element
{
int key;
};
 
struct element heap[7];
 
 
void push(struct element item,int *n)
{
int i;
if(*n==6)
{
printf("\n Heap is full ");
return;
}
 
i=++(*n);
while((i!=1)&&(item.key>heap[i/2].key))
{
heap[i]=heap[i/2]; i=i/2;
 
 
}
heap[i]=item;
 
}
 
struct element pop(int *n)
{
 int parent,child,i=1;
 struct element item,temp;
 if(*n==0)
 {
  printf("\n Heap Empty");
  item.key=-4498;
  return(item);
 }
 item=heap[i];
 temp=heap[(*n)--];
 parent=1;
 child=2;
 while(child<=(*n))
{
if(child<(*n)&&(heap[child].key))
   break;
heap[child]=heap[parent];
 parent=child;
child=child*2;
}
heap[parent]=temp;
return item;
}
 
void display(int *n)
{
int i;
printf("\n The heap is \n");
for(i=1;i<=*n;i++)
printf("%d  ",heap[i].key);
}
 
int main()
{
int choice=1;
int n=0;
struct element item;
while(choice!=4)
{
printf("\n MENU\n 1: insert \n 2:delet \n 3:display\n 4: exit ");
scanf("%d",&choice);
switch(choice)
 {case 1:printf("\n Enter the no ");
            scanf("%d",&item.key);
            push(item,&n);break;
  case 2:item=pop(&n);
            printf("\n deleted no is %d ",item.key);break;
  case 3: display(&n);break;
  case 4:printf(" \n thank u");
}
}
}
