#include<stdio.h>
typedef struct
{
 int p;
}element;
element *q;
int cap=2;
int front=0;
int rear=0;
void copy(element* l,element* r,element * new)
{
 while(l<=r)
 {
  *new=*l;
  l++;
  new++;
 }
}
void queuefull()
{
 int start;
 element *nq;
 nq=(element*)malloc(sizeof(element)*cap*2);
 start=(front+1)%cap;
 if(start<2)
  copy(q+start,q+start+cap-1,nq);
 else
 {
  copy(q+start,q+cap,nq);
  copy(q,q+rear-1,nq+cap-start);
 }
 front=2*cap-1;
 rear=cap-1;
 cap*=2;
 free(q);
 q=nq;
}
void add(element item)
{
 rear=(rear+1)%cap;
 if(front==rear)
  queuefull();
 q[rear]=item;
}
element deleteq()
{
 element item;
 if(front==rear)
  printf("Queue is empty\n");
 else{
 front=(front+1)%cap;
 return q[front];}
}

void display()
{
 int l, r ;
 l=(front+1)%cap;
 r=rear;
 while(l!=r)
 {
  printf("%d ",q[l].p);
  l=(l+1)%cap;
 }
 printf("%d ",q[r].p);
 printf("\n");
}
void main()
{
 element ele;
 int ch=1,ch1;
 q=(element*)malloc(sizeof(element)*2);
 while(ch==1)
 {
  printf("Perform one of the actions below\n");
  printf("1 add 2 delete 3 display\n");
  scanf("%d",&ch1);
  switch(ch1)
  {
   case 1:
    printf("Enter the element to add\n");
    scanf("%d",&ele.p);
    add(ele);
    break;
   case 2:
    printf("The element deleted is %d \n",deleteq());
    break;
   case 3:
    display();
    break;
   default:
    printf("You are illiterate \n");
    break;
  }
  printf("Do you want to perform furthur operations(1/2) \n");
  scanf("%d",&ch);
 }
}⁠⁠⁠⁠
